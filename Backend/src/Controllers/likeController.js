const { prisma } = require("../../prisma/client");

// if the user has already liked the post → it will remove the like
// If the user has not liked the post yet → it will add the like
exports.toggleLike = async (req, res) => {
    try{
  const userId = req.user.userId;
  // basically it is to get the id ofthe logged in user
  // req.user comes from auth middelware and user id tells us who is trying to liek the post

  const { postId } = req.params;
  // which post thye want to like or unlike

  // now we will check if our post exists
  const post = await prisma.post.findUnique({
    where: { id: parseInt(postId) },
  });
  if (!post) {
    return res.status(404).json({ error: "Post not found" });
  }

  // check if user has already liked the post
  const existingLike = await prisma.like.findUnique({
    where: {
      userId_postId: {
        userId: userId,
        postId: parseInt(postId),
      },
    },
  });
  // so this usrrId_postId tells us that u can like a specific post only once
  // this is a composite unique constraint which gets automatically generated by prisma from this line defined in like model
  // @@unique([userId, postId])

  if (existingLike) {
    await prisma.like.delete({
      where: {
        userId_postId: {
          userId: userId,
          postId: parseInt(postId),
        },
      },
    });
    return res.json({ message: "Like removed successfully" });
  } else {
    // if like does not exists then we will create a like
    await prisma.like.create({
      data: {
        userId: userId,
        postId: parseInt(postId),
      },
    });
    return res.json({ message: "Post liked successfully" });
  }
  
}
catch(err){
    console.error(err)
    return res.status(500).json({ error: "Something went wrong" });


}
}
